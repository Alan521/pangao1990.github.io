<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Markdown从入门到精通]]></title>
    <url>%2FMarkdown%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A%2F</url>
    <content type="text"><![CDATA[标题 主标题:【语法】 1主标题文字 (空行) ==（两个及以上） 【示例】12主标题文字（最高阶标题）== 主标题文字（最高阶标题） 【说明】相当于H1大纲标题效果，一般在首行应用和表示 副标题：【语法】 1副标题文字 (空行) --(减号两个及以上) 【示例】12主标题文字（第二阶标题）-- 主标题文字（第二阶标题） 【说明】相当于H2大纲标题效果 H1~H6大纲标题:【语法】 1# (空格)文字 1-6等级分别在文字前加对应数量#，后面的#为可选，不加效果也一样。 【示例】12345678910111213# 大纲标题文字 H1（等同 主标题）## 大纲标题文字 H2（等同 副标题）### 大纲标题文字 H3#### 大纲标题文字 H4##### 大纲标题文字 H5###### 大纲标题文字 H6####### 大纲标题文字 H7（最多6阶） 大纲标题文字 H1（等同 主标题）大纲标题文字 H2（等同 副标题）大纲标题文字 H3大纲标题文字 H4大纲标题文字 H5大纲标题文字 H6####### 大纲标题文字 H7（最多6阶） 【说明】最多6个等级的大纲标题，后面加上同等数量“（空格）#”效果也一样 标签 【语法】 1TAGS：内容 或 标签： 内容 在编辑区任意行的列首位置输入tags/标签：关键词1 关键词2 ， 多个用空格隔开。 【示例】1标签：教程 Markdown 标签：教程 Markdown 目录（大纲）导航 【语法】 1在段落中填写 [TOC] （toc小写也可以）以显示各标题为结构的目录（大纲）导航。 强调或突出 斜体：【语法】 1_斜体_ 或 *斜体* 在文字两边加 单下底线 或 单星号 【示例】 1_斜体_ 或 *斜体* _斜体_ 或 斜体 粗体：【语法】 1__粗体__ 或 **粗体** 在文字两边加 双下底线 或 双星号 【示例】 1__粗体__ 或 **粗体** 粗体 或 粗体 删除线： 【语法】 1~~删除线~~ 在文字两边加 双波浪号 【示例】 1这是带有 ~~删除线~~ 的文字 这是带有 删除线 的文字 【说明】快速记忆：单斜双粗两波删 下划线： 【语法】 1在空白行下方添加三条“-”横线。（前面讲过在文字下方添加“-”，实现的2级标题） 【示例】 1234这是下划线---你看到了吗？ 这是下划线 你看到了吗？ 段落与分割 普通段落：【语法】 1用空行分隔，连着多个空行也是一个效果，只能空一行的间距。 【示例】 123456这是首行文字这是尾行文字，实际中间我空了2行，但还是只显示空了一行的效果。【说明】有的语法要用到空行才有效果（如主标题，列表），不空行的话默认又是会跟随上面语法特征（如表格语法前面就要空行后才有效果），应用时多加注意。 这是首行文字 这是尾行文字，实际中间我空了2行，但还是只显示空了一行的效果。 【说明】有的语法要用到空行才有效果（如主标题，列表），不空行的话默认又是会跟随上面语法特征（如表格语法前面就要空行后才有效果），应用时多加注意。 水平分割线： 【语法】13个及以上的 星号***或 减号---或 下底线___来表示。 【示例】1*** 【说明】建议只固定选用一个，如三个星号***为标准，用减号—容易和副标题搞混。 强制换行：【语法】 1在行尾输入两个空格 【示例】 123这句话(空格)(空格)会(空格)(空格)换行 这句话会换行 【说明】强制换行比输入回车换行的行间距小很多 链接 网页链接（内联风格）：【语法】 1[链接文字](http://链接地址)&quot;（空格）鼠标悬停显示文字（可选）&quot; “（空格）鼠标悬停显示文字”非必须项，在pc浏览器中能看到效果，手机移动端因无鼠标效果无法直接体现。 【示例】1这是去往[本人博客](https://pangao1990.github.io)的链接。 这是去往本人博客的链接。 链接的快速定义：【语法】 1234567前面文档中引用链接的语法为：[链接文字][id]前后id要匹配一致，一般为数字，这样可以在文档的其他任意地方快速插入这个链接。后面定义链接的语法为：[id]:（空格）http://链接地址（空格）&quot;鼠标悬停显示文字（可选）&quot;后面的语法必须在列首并单独一行，适合前期不知道网址，后面再加入的情况。 【示例】 123这是去往[本人博客][1]的链接。[1]: https://pangao1990.github.io 这是去往本人博客的链接。 链接的自动展示：直接输入链接地址，可以直接识别。https://pangao1990.github.io Email 链接：【语法】 1直接&lt;邮箱号地址&gt;即可 【示例】 1我的email地址是：&lt;pangao1990@qq.com&gt;。 我的email地址是：&#112;&#x61;&#110;&#x67;&#97;&#x6f;&#x31;&#57;&#x39;&#x30;&#x40;&#x71;&#x71;&#x2e;&#x63;&#111;&#109;。 列表 有序列表：【语法】 1直接数字加英文句点加空格（最多三个空格）和文字 【示例】有序单层列表 123520. 列表项1（第一项数字一定要为“520”）201314. 列表项2（其实我前面的标的数字是“201314”）20161130. 列表项3（其实我前面的标的数字是“20161130” 列表项1（第一项数字一定要为“520”） 列表项2（其实我前面的标的数字是“201314”） 列表项3（其实我前面的标的数字是“20161130” 【说明】后面的不必在意数字从小到大的排序，显示时会自动排序，有智能的乱序纠正功能，非常贴心。数字前面加了空格，排序会变成罗马数字形式。 无序列表:【语法】 1文字前面加 星号空格*（空格）或 短横空格-（空格）或 加号+（空格）表示 【示例】无序单层列表 12- 列表项1- 列表项2 列表项1 列表项2 多重列表:【语法】 1单层列表项缩进1个tab就可以往后面叠加子层的列表 【示例】12345678910111. 首层列表项（有序）2. 第二层列表项1(嵌套的列表可以是有序的 )2. 第二层列表项2(格式和正常的有序、无序列表没有差异)3. 第三层列表项(tab)1. 三层的子列表项1(tab)2. 三层的子列表项2- 首层列表项第四层列表项2（无序）- 嵌套的列表可以是无序的(tab)- 子列表项 1（加了1个tab缩进）(tab)(tab)- 子列表项 2（加了2个tab缩进）(tab)(tab)(tab)- 子列表项 4（加了3个tab缩进） 首层列表项（有序） 第二层列表项1(嵌套的列表可以是有序的 ) 第二层列表项2(格式和正常的有序、无序列表没有差异) 第三层列表项 三层的子列表项1 三层的子列表项2 首层列表项第四层列表项2（无序） 嵌套的列表可以是无序的 子列表项 1（加了1个tab缩进） 子列表项 2（加了2个tab缩进） 子列表项 4（加了3个tab缩进） 引用 文字引用：【语法】 1段落前面添加大于号和空格&gt; （空格），就能够形成引用段落。 【示例】 123&gt;(空格)青松(空格)(空格)大雪压青松，青松挺且直。(空格)(空格)要知松高洁，待到雪化时。 青松大雪压青松，青松挺且直。要知松高洁，待到雪化时。 添加影像附件 插入图片:【语法】 1![图片描述](图片网络/本地图片地址)（空格）“鼠标悬停显示文字（可选）” 【说明】和网页链接用法一致。 代码块 行内（内联）代码【语法】 12使用`内容` 表示行内 代码块。即 在文字左右使用反引号包含（键盘数字“1”前面的波浪号大写状态时能打出）。 【示例】 1我是一只`小鸭子`，咿呀咿呀哟。 我是一只小鸭子，咿呀咿呀哟。 【说明】和标签/关键词的效果差不多，还可用于如按键Ctrl+F4，字母B，单词F**K、短句Are you ok？等诸多行的应用场景。能起到强调区分的作用。 段落文本代码块:【语法】 1每行缩进4个空格或 1个 Tab表示 【示例】 1(tab)这是一个代码块。 这是一个代码块。]]></content>
      <categories>
        <category>个人博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信小程序云开发的云函数中自增函数inc报错]]></title>
    <url>%2F%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91%E7%9A%84%E4%BA%91%E5%87%BD%E6%95%B0%E4%B8%AD%E8%87%AA%E5%A2%9E%E5%87%BD%E6%95%B0inc%E6%8A%A5%E9%94%99%2F</url>
    <content type="text"><![CDATA[错误提示 message _ is not defined 如下： 其实吧， -404011 和 -504002 这些错误提示都基本没用。主要看我画红线的地方，说不认得 _ 。再回过头好好看看官方文档，原来是掉了一条定义 _ 的代码，如下： 如果你也和我一样粗心，希望本文能帮到你。]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信小程序中的云开发如何检测云函数中的对象是否存在某个属性]]></title>
    <url>%2F%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%AD%E7%9A%84%E4%BA%91%E5%BC%80%E5%8F%91%E5%A6%82%E4%BD%95%E6%A3%80%E6%B5%8B%E4%BA%91%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E6%9F%90%E4%B8%AA%E5%B1%9E%E6%80%A7%2F</url>
    <content type="text"><![CDATA[常规的 JS检测对象中是否存在某个属性 的方法不管用，可能微信云函数屏蔽了一些功能。试来试去，找到一个办法，如果有更优雅的办法，欢迎来喷。 使用 捕获异常 的办法，如下： 判断 reult 中是否含有 data 这个键12345678try &#123; var data = reult.data //有&#125; catch (e) &#123; //没有&#125;]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信小程序中的云开发如何使用云函数生成二维码]]></title>
    <url>%2F%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%AD%E7%9A%84%E4%BA%91%E5%BC%80%E5%8F%91%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E4%BA%91%E5%87%BD%E6%95%B0%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81%2F</url>
    <content type="text"><![CDATA[首先，需要给对应的云函数安装 request-promise 依赖。（不会给云函数安装依赖的盆友请移步 微信小程序中的云开发如何使用npm安装依赖） 生成二维码的云函数如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657// 云函数入口文件const cloud = require('wx-server-sdk')const rp = require('request-promise')cloud.init()// 云函数入口函数exports.main = async (event, context) =&gt; &#123; const page = event.page const scene = event.scene //appid和秘钥 const appid = '***', secret = '***'; const AccessToken_options = &#123; method: 'GET', url: 'https://api.weixin.qq.com/cgi-bin/token', qs: &#123; appid, secret, grant_type: 'client_credential' &#125;, json: true &#125;; //获取AccessToken const resultValue = await rp(AccessToken_options); const token = resultValue.access_token; //获取小程序码配置 const code_options = &#123; method: 'POST', url: 'https://api.weixin.qq.com/wxa/getwxacodeunlimit?access_token=' + token, body: &#123; 'page': page, 'width': 430, 'scene': scene &#125;, json: true, encoding: null &#125;; //获取二进制图片 const buffer = await rp(code_options); const upload = await cloud.uploadFile(&#123; cloudPath: 'wxacode.png', fileContent: buffer, &#125;) return &#123; wxacodefileID: upload.fileID &#125;&#125;]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信小程序中的云开发如何使用npm安装依赖]]></title>
    <url>%2F%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%AD%E7%9A%84%E4%BA%91%E5%BC%80%E5%8F%91%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8npm%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96%2F</url>
    <content type="text"><![CDATA[微信小程序开发教程描述的相当模糊，以至于我反复品读，多次尝试才悟出来该怎么在云开发中使用 npm 安装依赖。 首先强调一下，云开发中必须安装 wx-server-sdk 依赖， 而wx-server-sdk 依赖需要使用 npm 的。但由于部分开发过程可能不再需要其他的依赖，那么每次开发都要使用 npm 安装依赖是一件很麻烦的事情。微信为了简化云开发操作，提供了一键云端安装 wx-server-sdk 依赖，也就是在云端帮助我们搞定，不需要我们手动在本地使用 npm 安装，如下图： 如果某个自建的云函数需要使用 npm 安装第三方依赖，该怎么办呢？操作如下： 1. 右键云函数，选择“终端打开”，如下图： 2. 安装所需依赖：1npm install request-promise --production 3. 紧接着，千万别忘了，安装 wx-server-sdk 依赖：1npm install wx-server-sdk --production 4. 选择“上传并部署：所有文件”，如下图： 5. 等待完成，即可，如下图： ps: 若不使用npm，则直接选择“云端安装依赖”。 若要使用npm，则需在终端中手动安装依赖。此时，千万不要忘记安装 wx-server-sdk 依赖，因为“上传并部署：所有文件”这一选项并不会帮我们傻瓜式安装 wx-server-sdk 依赖。]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客NexT主题美化之新增看板娘(能说话、能换装)]]></title>
    <url>%2FHexo%E5%8D%9A%E5%AE%A2NexT%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B9%8B%E6%96%B0%E5%A2%9E%E7%9C%8B%E6%9D%BF%E5%A8%98(%E8%83%BD%E8%AF%B4%E8%AF%9D%E3%80%81%E8%83%BD%E6%8D%A2%E8%A3%85)%2F</url>
    <content type="text"><![CDATA[效果图： 教程： 小白水平： hexo的官方是支持看板娘的，已经封装好了插件，但只是模型，不能说话、不能换装、功能较少。 安装模块，如下： 1npm install --save hexo-helper-live2d 在 站点配置文件 或 主题配置文件 中新增如下内容： 12345678910111213141516171819202122232425# Live2D## https://github.com/EYHN/hexo-helper-live2dlive2d: enable: true # enable: false scriptFrom: local # 默认 pluginRootPath: live2dw/ # 插件在站点上的根目录(相对路径) pluginJsPath: lib/ # 脚本文件相对与插件根目录路径 pluginModelPath: assets/ # 模型文件相对与插件根目录路径 # scriptFrom: jsdelivr # jsdelivr CDN # scriptFrom: unpkg # unpkg CDN # scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url tagMode: false # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中 debug: false # 调试, 是否在控制台输出日志 model: use: live2d-widget-model-wanko # npm-module package name # use: wanko # 博客根目录/live2d_models/ 下的目录名 # use: ./wives/wanko # 相对于博客根目录的路径 # use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url display: position: right width: 150 height: 300 mobile: show: true # 手机中是否展示 小白水平，效果如下： 大神水平： 大神作品，功能齐全。能说话、能换装、能玩游戏、能拍照、还能自定义。 下载 张书樵大神的项目，解压到本地博客目录的themes/next/source下，修改autoload.js文件，如下：将 1const live2d_path = "https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget/"; 改为 1const live2d_path = "/live2d-widget/"; 在/themes/next/layout/_layout.swing中,新增如下内容： 1&lt;script src="/live2d-widget/autolload.js"&gt;&lt;/script&gt; 在 主题配置文件 中,新增如下内容： 12live2d: enable: true 想修改看板娘大小、位置、格式、文本内容等，可查看并修改 waifu-tips.js 、 waifu-tips.json 和 waifu.css。 大神水平，效果如下：]]></content>
      <categories>
        <category>个人博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客NexT主题美化之文末统一添加“本文结束”标记]]></title>
    <url>%2FHexo%E5%8D%9A%E5%AE%A2NexT%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B9%8B%E6%96%87%E6%9C%AB%E7%BB%9F%E4%B8%80%E6%B7%BB%E5%8A%A0%E2%80%9C%E6%9C%AC%E6%96%87%E7%BB%93%E6%9D%9F%E2%80%9D%E6%A0%87%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[效果图： 教程： 在目录 themes/next/layout/_macro/ 下添加 passage-end-tag.swig ，内容如下： 12345&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style="text-align:center;color: #ccc;font-size:14px;"&gt;------ 本文结束------&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt; 打开 themes/next/layout/_macro/post.swig 文件，新增内容如下: 12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include 'passage-end-tag.swig' %&#125; &#123;% endif %&#125; &lt;/div&gt; 打开主题配置文件 ，添加代码如下： 123# 文章末尾添加“本文结束”标记passage_end_tag:enabled: true]]></content>
      <categories>
        <category>个人博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客NexT主题美化之自定义文章底部版权声明]]></title>
    <url>%2FHexo%E5%8D%9A%E5%AE%A2NexT%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%87%E7%AB%A0%E5%BA%95%E9%83%A8%E7%89%88%E6%9D%83%E5%A3%B0%E6%98%8E%2F</url>
    <content type="text"><![CDATA[效果图： 教程： 在目录 themes/next/layout/_macro/ 下添加 my-copyright.swig ，内容如下： 123456789101112131415161718192021222324252627282930313233&#123;% if page.copyright %&#125;&lt;div class="my_post_copyright"&gt; &lt;script src="//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js"&gt;&lt;/script&gt; &lt;!-- JS库 sweetalert 可修改路径 --&gt; &lt;script type="text/javascript" src="http://jslibs.wuxubj.cn/sweetalert_mini/jquery-1.7.1.min.js"&gt;&lt;/script&gt; &lt;script src="http://jslibs.wuxubj.cn/sweetalert_mini/sweetalert.min.js"&gt;&lt;/script&gt; &lt;link rel="stylesheet" type="text/css" href="http://jslibs.wuxubj.cn/sweetalert_mini/sweetalert.mini.css"&gt; &lt;p&gt;&lt;span&gt;本文标题:&lt;/span&gt;&#123;&#123; page.title &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;文章作者:&lt;/span&gt;&#123;&#123; theme.author &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;发布时间:&lt;/span&gt;&#123;&#123; page.date.format("YYYY年MM月DD日 - HH:mm:ss") &#125;&#125;&lt;/p&gt; &lt;p&gt;&lt;span&gt;最后更新:&lt;/span&gt;&#123;&#123; page.updated.format("YYYY年MM月DD日 - HH:mm:ss") &#125;&#125;&lt;/p&gt; &lt;p&gt;&lt;span&gt;原始链接:&lt;/span&gt;&lt;a href="&#123;&#123; url_for(page.path) &#125;&#125;" title="&#123;&#123; page.title &#125;&#125;"&gt;&#123;&#123; page.permalink &#125;&#125;&lt;/a&gt; &lt;span class="copy-path" title="点击复制文章链接"&gt;&lt;i class="fa fa-clipboard" data-clipboard-text="&#123;&#123; page.permalink &#125;&#125;" aria-label="复制成功！"&gt;&lt;/i&gt;&lt;/span&gt; &lt;/p&gt; &lt;p&gt;&lt;span&gt;许可协议:&lt;/span&gt;&lt;i class="fa fa-creative-commons"&gt;&lt;/i&gt; &lt;a rel="license" href="https://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" title="Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)"&gt;署名-非商业性使用-禁止演绎 4.0 国际&lt;/a&gt; 转载请保留原文链接及作者。&lt;/p&gt; &lt;/div&gt;&lt;script&gt; var clipboard = new Clipboard('.fa-clipboard'); clipboard.on('success', $(function()&#123; $(".fa-clipboard").click(function()&#123; swal(&#123; title: "", text: '复制成功', html: false, timer: 500, showConfirmButton: false &#125;); &#125;); &#125;)); &lt;/script&gt;&#123;% endif %&#125; 在目录 themes/next/source/css/_common/components/post/ 下添加 my-post-copyright.styl，内容如下: 123456789101112131415161718192021222324252627282930313233343536373839404142434445.my_post_copyright &#123; width: 85%; max-width: 45em; margin: 2.8em auto 0; padding: 0.5em 1.0em; border: 1px solid #d3d3d3; font-size: 0.93rem; line-height: 1.6em; word-break: break-all; background: rgba(255,255,255,0.4);&#125;.my_post_copyright p&#123;margin:0;&#125;.my_post_copyright span &#123; display: inline-block; width: 5.2em; color: #333333; // title color font-weight: bold;&#125;.my_post_copyright .raw &#123; margin-left: 1em; width: 5em;&#125;.my_post_copyright a &#123; color: #808080; border-bottom:0;&#125;.my_post_copyright a:hover &#123; color: #0593d3; // link color text-decoration: underline;&#125;.my_post_copyright:hover .fa-clipboard &#123; color: #000;&#125;.my_post_copyright .post-url:hover &#123; font-weight: normal;&#125;.my_post_copyright .copy-path &#123; margin-left: 1em; width: 1em; +mobile()&#123;display:none;&#125;&#125;.my_post_copyright .copy-path:hover &#123; color: #808080; cursor: pointer;&#125; 修改 themes/next/layout/_macro/post.swig ，如下：在代码 12345&#123;% if theme.wechat_subscriber.enabled and not is_index %&#125; &lt;div&gt; &#123;% include 'wechat-subscriber.swig' %&#125; &lt;/div&gt;&#123;% endif %&#125; 之前，新增如下代码：12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include 'my-copyright.swig' %&#125; &#123;% endif %&#125;&lt;/div&gt; 打开 themes/next/source/css/_common/components/post/post.styl 文件，在最后一行增加代码： 1@import "my-post-copyright" 设置新建文章自动开启 copyright ，即新建文章自动显示自定义的版权声明，设置 ～/scaffolds/post.md 文件，如下： 12345---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;copyright: true #新增,开启---]]></content>
      <categories>
        <category>个人博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客NexT主题美化之显示当前浏览进度]]></title>
    <url>%2FHexo%E5%8D%9A%E5%AE%A2NexT%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B9%8B%E6%98%BE%E7%A4%BA%E5%BD%93%E5%89%8D%E6%B5%8F%E8%A7%88%E8%BF%9B%E5%BA%A6%2F</url>
    <content type="text"><![CDATA[效果图： 教程： 打开 themes/next/_config.yml ,搜索关键字 scrollpercent ,把 false 改为 true ，如下： 12# Scroll percent label in b2t button scrollpercent: true 如果想把 top 按钮放在侧边栏,打开 themes/next/_config.yml ,搜索关键字 b2t ,把 false 改为 true ，如下： 12345# Back to top in sidebar b2t: true # Scroll percent label in b2t button scrollpercent: true]]></content>
      <categories>
        <category>个人博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客NexT主题美化之评论系统]]></title>
    <url>%2FHexo%E5%8D%9A%E5%AE%A2NexT%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[效果图： Valine 诞生于2017年8月7日，是一款基于Leancloud的快速、简洁且高效的无后端评论系统。 教程： 登录 Leancloud 官网，注册之后创建一个应用，选择【设置】-&gt;【应用Key】记下你的APP ID和APP Key，如下： 编辑 主题配置文件，搜索 Valine，填入appid 和 appkey，如下： 123456789101112valine: enable: true # When enable is set to be true, leancloud_visitors is recommended to be closed for the re-initialization problem within different leancloud adk version. appid: # your app id appkey: # your app key notify: true # 评论回复邮件提醒, See: https://github.com/xCss/Valine/wiki verify: false # 验证码服务 placeholder: 留言区 # 评论框占位提示符 avatar: mm # 头像配置 guest_info: nick,mail,link # 回复要填写的信息 pageSize: 10 # 评论列表分页，每页条数 visitor: false # 文章访问量统计 comment_count: true # if false, comment count will only be displayed in post page, not in home page 可选操作： 在【Leancloud】 -&gt; 【设置】 -&gt; 【安全中心】 -&gt; 【Web 安全域名】把你的域名加进去，可防止数据被篡改。]]></content>
      <categories>
        <category>个人博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客NexT主题美化之搜索服务]]></title>
    <url>%2FHexo%E5%8D%9A%E5%AE%A2NexT%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B9%8B%E6%90%9C%E7%B4%A2%E6%9C%8D%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[效果图： 教程： 安装插件hexo-generator-searchdb，如下： 1npm install hexo-generator-searchdb --save 编辑 站点配置文件，新增以下内容到任意位置，如下： 12345search: path: search.xml field: post format: html limit: 10000 编辑 主题配置文件，启用本地搜索功能，如下： 123# Local searchlocal_search: enable: true]]></content>
      <categories>
        <category>个人博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AdobePhotoshopCC2019-图形处理中文完美Mac版]]></title>
    <url>%2FAdobePhotoshopCC2019-%E5%9B%BE%E5%BD%A2%E5%A4%84%E7%90%86%E4%B8%AD%E6%96%87%E5%AE%8C%E7%BE%8EMac%E7%89%88%2F</url>
    <content type="text"><![CDATA[简介：Adobe Photoshop CC 2019是数字图像处理和编辑的行业标准，提供了一整套专业的修饰工具，并拥有强大的编辑功能，旨在激发灵感。 教程：压缩包内含详细教程。 下载地址：云盘下载密码: p8lc 本软件来源于网络，仅供学习使用，请在24小时内删除，本人不承担任何相关责任！若侵犯某些组织或个人的权益，请联系我删除。]]></content>
      <categories>
        <category>Mac软件分享</category>
      </categories>
      <tags>
        <tag>软件分享</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ImageOptim-无损图片压缩Mac版]]></title>
    <url>%2FImageOptim-%E6%97%A0%E6%8D%9F%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9Mac%E7%89%88%2F</url>
    <content type="text"><![CDATA[简介：ImageOptim 是一款小巧免费且开源的 Mac 图片无损压缩优化工具。默认设置下，它的压缩号称是「无损」的，也就是说画质不会被改变，但体积却可以被减小，堪称神器！ 教程ImageOptim 支持 PNG、JPG、GIF 格式的图片压缩优化，你只需将文件拖放到它的界面上即可完成优化 (PS：处理后会覆盖原图 / 原图被移到垃圾桶，可手工恢复)，支持批量，使用上非常简单方便。 效果比对： 下载地址：官方下载]]></content>
      <categories>
        <category>Mac软件分享</category>
      </categories>
      <tags>
        <tag>软件分享</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用PS修改GIF动图循环播放次数]]></title>
    <url>%2F%E7%94%A8PS%E4%BF%AE%E6%94%B9GIF%E5%8A%A8%E5%9B%BE%E5%BE%AA%E7%8E%AF%E6%92%AD%E6%94%BE%E6%AC%A1%E6%95%B0%2F</url>
    <content type="text"><![CDATA[用Photoshop（Mac中文完美版下载地址）修改GIF动图循环播放次数，一次、三次、无限次循环播放…其实很容易。 教程 用Photoshop打开GIF动图，选择【文件】-&gt;【导出】-&gt;【存储为Web所用格式】，如下： 动画循环选项，选择【永远】或【1次】，存储，如下：]]></content>
      <categories>
        <category>IT实用技能</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>GIF</tag>
        <tag>PS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac屏幕录制GIF动图]]></title>
    <url>%2FMac%E5%B1%8F%E5%B9%95%E5%BD%95%E5%88%B6GIF%E5%8A%A8%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[在 Mac 上最方便的录制屏幕 GIF 动图的方式就是利用 QQ 软件的录屏功能。 效果图： 教程 鼠标放在 QQ 聊天窗口中的“捕捉屏幕”上，选中“录屏”，如下： 选择想要录屏的区域，如下： 点击【开始录制】，如下： 随后会显示之前录制的视频，选择【下载】，如下： 在保存格式中选择 gif ，点击【存储】，如下： 得到 GIF 动图，如下： 后记： 此时得到的 GIF 动图大小为1.9M，如果想对其大小做简单的压缩，可以用Mac自带的预览打开它。选择【文件】中的【导出】选项，如下： 导出格式选择 gif ，点击【存储】，如下： 可以看到，大小由原来的1.9M压缩为197K，如下： 但是，如此大的压缩比，牺牲的是 GIF 无限循环播放的能力。 如果不在意 GIF 动图仅能播放一次，那么可以使用此方法压缩； 如果想要无限循环播放，又想极致压缩，请移步 用PS修改GIF动图循环播放次数 和 ImageOptim-无损图片压缩Mac版]]></content>
      <categories>
        <category>IT实用技能</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>GIF</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客NexT主题美化之网站标题栏背景变色]]></title>
    <url>%2FHexo%E5%8D%9A%E5%AE%A2NexT%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B9%8B%E7%BD%91%E7%AB%99%E6%A0%87%E9%A2%98%E6%A0%8F%E8%83%8C%E6%99%AF%E5%8F%98%E8%89%B2%2F</url>
    <content type="text"><![CDATA[效果图： 教程打开themes/next/source/css/_custom/custom.styl，在里面新增如下代码：123.site-meta &#123; background: $blue; //天空的颜色，和我的眼镜是绝配&#125;]]></content>
      <categories>
        <category>个人博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客NexT主题美化之顶部加载进度条]]></title>
    <url>%2FHexo%E5%8D%9A%E5%AE%A2NexT%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B9%8B%E9%A1%B6%E9%83%A8%E5%8A%A0%E8%BD%BD%E8%BF%9B%E5%BA%A6%E6%9D%A1%2F</url>
    <content type="text"><![CDATA[效果图： 教程 进入博客文件夹的/themes/next文件夹下 1cd /themes/next 下载安装Progress module，如下 1git clone https://github.com/theme-next/theme-next-pace source/lib/pace 在/themes/next/_config.yml中设置，如下 123456789# Progress bar in the top during page loading.# Dependencies: https://github.com/theme-next/theme-next-pacepace: true #是否开启进度条# Themes list:# pace-theme-big-counter | pace-theme-bounce | pace-theme-barber-shop | pace-theme-center-atom# pace-theme-center-circle | pace-theme-center-radar | pace-theme-center-simple | pace-theme-corner-indicator# pace-theme-fill-left | pace-theme-flash | pace-theme-loading-bar | pace-theme-mac-osx | pace-theme-minimal# For examplepace_theme: pace-theme-center-atom #选择进度条样式 不同的样式效果图： pace-theme-big-counter pace-theme-bounce pace-theme-barber-shop pace-theme-center-atom pace-theme-center-circle pace-theme-center-radar pace-theme-center-simple pace-theme-corner-indicator pace-theme-fill-left pace-theme-flash pace-theme-loading-bar pace-theme-mac-osx pace-theme-minimal 后记： 我的网络时好时坏的，所以进度条也是录的时快时慢，请大家见谅。 想知道怎么在Mac下高效的制作gif动图的小伙伴请移步至 Mac屏幕录制GIF动图 为了让大家可以直观的查看进度条的效果，因此我录制了gif动图，如果您觉得这对您有帮助，请随意打赏或评论点赞，谢谢大家。]]></content>
      <categories>
        <category>个人博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Node.js安装教程]]></title>
    <url>%2FNodeJs%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[什么是Node.jsNodeJS官网上的介绍： Node.js is a platform built on Chrome’s JavaScript runtime for easily building fast, scalable network applications. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices. 它是一个Javascript运行环境 依赖于Chrome V8引擎进行代码解释 事件驱动 非阻塞I/O（NodeJS遇到I/O事件会创建一个线程去执行，然后主线程会继续往下执行的） 轻量、可伸缩，适于实时数据交互应用 单进程，单线程 Node.js的优缺点NodeJS适合运用在高并发、I/O密集、少量业务逻辑的场景（高并发、聊天、实时消息推送） 优点： 高并发（最重要的优点） NodeJs更改连接到服务器的方式，每个连接发射（emit）一个在NodeJS引擎进程中运行的事件（Event），放进事件队列当中，而不是为每个连接生成一个新的OS线程（并为其分配一些配套内存） 适合I/O密集型应用 缺点： 不适合CPU密集型应用；CPU密集型应用给Node带来的挑战主要是：由于JavaScript单线程的原因，如果有长时间运行的计算（比如大循 环），将会导致CPU时间片不能释放，使得后续I/O无法发起； 解决方案：分解大型运算任务为多个小任务，使得运算能够适时释放，不阻塞I/O调用的发起。 只支持单核CPU，不能充分利用CPU； 可靠性低，一旦代码某个环节崩溃，整个系统都崩溃（原因：单进程，单线程）； 解决方案： Nnigx反向代理，负载均衡，开多个进程，绑定多个端口； 开多个进程监听同一个端口，使用cluster模块。 Debug不方便，错误没有stack trace。 Node.js的安装 访问 Node.js 下载地址：https://nodejs.org/zh-cn/ ，下载最新版本。 双击刚才下载文件，按照步骤默认安装。 Node.js和npm安装完成。 安装完成后打开终端，输入12npm -vnode -v 两个命令，如下图出现版本信息，说明安装成功。]]></content>
      <categories>
        <category>个人博客</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>NodeJs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git安装教程]]></title>
    <url>%2FGit%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[打开终端，输入1git --version 系统提示安装git 待安装完毕，在终端再次输入1git --version 如下图出现版本信息，说明安装成功。]]></content>
      <categories>
        <category>个人博客</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何使用Hexo创建个人博客]]></title>
    <url>%2F%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Hexo%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[什么是 Hexo？Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 安装 安装 Hexo 比较简单，但在安装前，需要安装如下应用程序。（如果您已经安装了如下程序，请直接执行第2步。） Node.js （安装教程） Git （安装教程） 安装Hexo，打开终端，输入1npm install -g hexo-cli 建站安装 Hexo 完成后，执行下列命令，Hexo 将会在指定文件夹中创建博客框架。12hexo init &lt;folder&gt;cd &lt;folder&gt; 新建完成后，指定文件夹的目录如下： _config.yml =&gt; 网站的 配置 信息，您可以在此配置大部分的参数。 package.json =&gt; 应用程序的信息。 scaffolds =&gt; 模版文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。 source =&gt; 资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。 themes =&gt; 主题文件夹。Hexo 会根据主题来生成静态页面。 预览 生成静态文件。在终端中输入 1hexo generate 启动服务器。在终端中输入 1hexo server 默认情况下，在浏览器中访问网址： http://localhost:4000/ 即可预览个人博客。 写作你可以执行下列命令来创建一篇新文章。1hexo new &lt;title&gt; 部署 安装 hexo-deployer-git。 1npm install hexo-deployer-git --save 修改配置。 12345deploy: type: git repo: &lt;repository url&gt; #https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io branch: [branch] #published message: [message] 参数 描述 repo 库（Repository）地址 branch 分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。 message 自定义提交信息 (默认为 Site updated: YYYY-MM-DD HH:mm:ss) 生成站点文件并推送至远程库。执行命令。1hexo clean &amp;&amp; hexo deploy 前者清除站点文件，后者重新生成站点文件并将之推送到指定的库分支。]]></content>
      <categories>
        <category>个人博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue中使用vue-i18n实现中英文切换]]></title>
    <url>%2FVue%E4%B8%AD%E4%BD%BF%E7%94%A8vue-i18n%E5%AE%9E%E7%8E%B0%E4%B8%AD%E8%8B%B1%E6%96%87%E5%88%87%E6%8D%A2%2F</url>
    <content type="text"><![CDATA[安装依赖1npm install vue-i18n 在main.js中引入并使用1234567891011import VueI18n from 'vue-i18n'Vue.use(VueI18n)const i18n = new VueI18n(&#123; locale: window.localStorage.getItem('user_lang') == null ? "cn" : window.localStorage.getItem('user_lang'), // 语言标识 messages: &#123; 'cn': require('./utils/lang/cn'), // 中文语言包 'en': require('./utils/lang/en') // 英文语言包 &#125;,&#125;) 多语言的js文件 cn.js文件内容： 12345678module.exports = &#123; language: &#123; name: 'English' &#125;, login: &#123; welcome: '欢迎您' &#125;&#125; en.js文件内容： 12345678module.exports = &#123; language: &#123; name: '中文' &#125;, login: &#123; welcome: 'Welcome' &#125;&#125; 上面的name语言之所以是反的，是因为切换按钮的文字显示需要是反，即英文页面显示中文切换按钮，中文页面显示英文切换按钮。 使用i18n12345678&lt;template&gt; &lt;p&gt;&#123;&#123; $t('language.name') &#125;&#125;&lt;/p&gt;&lt;/template&gt;&lt;script&gt; test() &#123; var name = this.$t('language.name') &#125;,&lt;/script&gt;]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[抓包工具Charles从入门到入土]]></title>
    <url>%2F%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7Charles%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F%2F</url>
    <content type="text"><![CDATA[简介Charles 是在 Mac 下常用的网络封包截取工具，通过将自己设置成系统的网络访问代理服务器，使得所有的网络访问请求都通过它来完成，从而实现了网络封包的截取和分析。 Charles 是收费软件，可以免费试用 30 天。试用期过后，未付费的用户仍然可以继续使用，但是每次使用时间不能超过 30 分钟，并且启动时将会有 10 秒种的延时。因此，该付费方案对广大用户还是相当友好的，即使你长期不付费，也能使用完整的软件功能。只是当你需要长时间进行封包调试时，会因为 Charles 强制关闭而遇到影响。 主要功能 截取 Http 和 Https 网络封包； 支持重发网络请求，方便后端调试； 支持修改网络请求参数； 支持网络请求的截获并动态修改； 支持流量控制，可以模拟慢速网络以及等待时间（latency）较长的请求； 支持AJAX调试，可以自动将json或xml数据格式化，方便查看； 支持AMF调试，可以将Flash Remoting 或 Flex； Remoting信息格式化，方便查看； 检查HTML，CSS和RSS内容是否符合W3C标准。 安装 官网下载 最新试用版安装。 某云盘下载 完美版安装（密码： 89pl ）。 设置系统代理 紧接着，软件中就会出现抓取的网页信息： Charles 主要提供两种查看封包的视图，分为 Structure 和 Sequence： Structure 视图将网络请求按访问的域名分类； Sequence 视图将网络请求按访问的时间排序。 获取手机上的网络封包 打开代理功能 在 Charles 的菜单栏上选择 “Proxy”-&gt;”Proxy Settings”，填入代理端口 8888，并且勾上 “Enable transparent HTTP proxying” 就完成了在 Charles 上的设置。如下图： 获取电脑IP Charles 顶部菜单的 “Help”-&gt;”Local IP Address”，即可在弹出的对话框中看到 IP 地址，如下图： 手机设置代理连接 一定一定，手机和电脑要处于同一局域网下。 在手机的网络设置中，填入刚才获取到的电脑IP和 Charles 上设置的端口，如下图： 完事之后，打开手机上任意需要联网的程序，就可以在 Charles 上看到请求连接的确认提示，点击确认，如下： 截获 HTTPS必须安装Charles的CA证书，不然 HTTPS 的返回结果会是一堆乱码。 首先我们需要在 Mac 电脑上安装证书。点击 Charles 的顶部菜单，选择 “Help” -&gt; “SSL Proxying” -&gt; “Install Charles Root Certificate”，然后输入系统的帐号密码，即可在 KeyChain 看到添加好的证书。如下图： 如果我们需要在手机上截取 Https 的内容，还需要在手机上安装相应的证书。点击 Charles 的顶部菜单，选择 “Help” -&gt; “SSL Proxying” -&gt; “Install Charles Root Certificate on a Mobile Device or Remote Browser”，然后就可以看到 Charles 弹出的安装教程。如下图： 在设备上设置好 Charles 为代理后，在手机浏览器中访问地址：chls.pro/ssl ，即可打开证书安装的界面，安装完证书后，就可以截取手机上的 Https 内容了。 模拟低速网络在做移动开发的时候，我们常常需要模拟慢速网络或者高延迟的网络，以测试在移动网络下，应用的表现是否正常。Charles 对此需求提供了很好的支持。 在 Charles 的菜单上，选择 “Proxy”-&gt;”Throttle Setting” 项，在之后弹出的对话框中，我们可以勾选上 “Enable Throttling”，并且可以设置 Throttle Preset 的类型。如下图： 如果我们只想模拟指定网站的慢速网络，可以再勾选上图中的 “Only for selected hosts” 项，然后在对话框的下半部分设置中增加指定的 hosts 项即可。 给服务器做压力测试我们可以使用 Charles 的 Repeat 功能来简单地测试服务器的并发处理能力，我们在想打压的网络请求上（POST 或 GET 请求均可）右击，然后选择 「Repeat Advanced」菜单项，如下图： 接着我们就可以在弹出的对话框中，选择打压的并发线程数以及打压次数，确定之后，即可开始打压。 反向代理Charles 的反向代理功能允许我们将本地的端口映射到远程的另一个端口上。例如，在下图中，我将本机的 8080 端口映射到了远程（pangao1990.github.io）的80端口上了。这样，当我访问本地的 8080 端口时，实际返回的内容会由 pangao1990.github.io 的 80 端口提供。 修改服务器返回内容根据具体的需求，Charles 提供了 Map 功能、 Rewrite 功能以及 Breakpoints 功能，都可以达到修改服务器返回内容的目的。这三者在功能上的差异是： Map 功能适合长期地将某一些请求重定向到另一个网络地址或本地文件。 Rewrite 功能适合对网络请求进行一些正则替换。 Breakpoints 功能适合做一些临时性的修改。 Map 功能Charles 的 Map 功能分 Map Remote 和 Map Local 两种，顾名思义，Map Remote 是将指定的网络请求重定向到另一个网址请求地址，Map Local 是将指定的网络请求重定向到本地文件。 在 Charles 的菜单中，选择 “Tools”-&gt;”Map Remote” 或 “Map Local” 即可进入到相应功能的设置页面。 对于 Map Remote 功能，我们需要分别填写网络重定向的源地址和目的地址，对于不需要限制的条件，可以留空。下图是一个示例，我将所有 www.baidu.com 的请求重定向到了 pangao1990.github.io 。 对于 Map Local 功能，我们需要填写的重定向的源地址和本地的目标文件。对于有一些复杂的网络请求结果，我们可以先使用 Charles 提供的 “Save Response…” 功能，将请求结果保存到本地（如下图），然后稍加修改，成为我们的目标映射文件。 将一个指定的网络请求通过 Map Local 功能映射到了本地的一个经过修改的文件中。 Map Local 在使用的时候，有一个潜在的问题，就是其返回的 Http Response Header 与正常的请求并不一样。这个时候如果客户端校验了 Http Response Header 中的部分内容，就会使得该功能失效。解决办法是同时使用 Map Local 以下面提到的 Rewrite 功能，将相关的 Http 头 Rewrite 成我们希望的内容。 Rewrite 功能Rewrite 功能功能适合对某一类网络请求进行一些正则替换，以达到修改结果的目的。例如，我博客返回的昵称是“潘高”，我现在要改成“大帅哥”，如下图： Breakpoints 功能上面提供的 Rewrite 功能最适合做批量和长期的替换，但是很多时候，我们只是想临时修改一次网络请求结果，这个时候，使用 Rewrite 功能虽然也可以达到目的，但是过于麻烦，对于临时性的修改，我们最好使用 Breakpoints 功能。 Breakpoints 功能类似我们在 Xcode 中设置的断点一样，当指定的网络请求发生时，Charles 会截获该请求，这个时候，我们可以在 Charles 中临时修改网络请求的返回内容。 需要注意的是，使用 Breakpoints 功能将网络请求截获并修改过程中，整个网络请求的计时并不会暂停，所以长时间的暂停可能导致客户端的请求超时。]]></content>
      <categories>
        <category>IT实用技能</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>Charles</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS检测对象中是否存在某个属性]]></title>
    <url>%2FJS%E6%A3%80%E6%B5%8B%E5%AF%B9%E8%B1%A1%E4%B8%AD%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E6%9F%90%E4%B8%AA%E5%B1%9E%E6%80%A7%2F</url>
    <content type="text"><![CDATA[使用in关键字该方法可以判断对象的自有属性和继承来的属性是否存在。1234var o=&#123;x:1&#125;;"x" in o; //true，自有属性存在"y" in o; //false"toString" in o; //true，是一个继承属性 使用对象的hasOwnProperty()方法该方法只能判断自有属性是否存在，对于继承属性会返回false。1234var o=&#123;x:1&#125;;o.hasOwnProperty("x"); //true，自有属性中有xo.hasOwnProperty("y"); //false，自有属性中不存在yo.hasOwnProperty("toString"); //false，这是一个继承属性，但不是自有属性 使用undefined判断自有属性和继承属性均可判断。1234var o=&#123;x:1&#125;;o.x!==undefined; //trueo.y!==undefined; //falseo.toString!==undefined //true 该方法存在一个问题，如果属性的值就是undefined的话，该方法不能返回想要的结果，如下:1234var o=&#123;x:undefined&#125;;o.x!==undefined; //false，属性存在，但值是undefinedo.y!==undefined; //falseo.toString!==undefined //true 在条件语句中判断12var o=&#123;&#125;;if(o.x) o.x+=1; //如果x是undefine,null,false," ",0或NaN,它将保持不变]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS的深拷贝与浅拷贝]]></title>
    <url>%2FJS%E7%9A%84%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D%2F</url>
    <content type="text"><![CDATA[深拷贝：1arr1 = JSON.parse(JSON.stringify(arr2)) 修改arr2，不会影响到arr1。因为arr1和arr2指向不同的地址。 浅拷贝：1arr1 = arr2 修改arr2，arr1会改变。因为arr1和arr2指向同一的地址。]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MacBooster-系统清理和优化工具Mac绿色版]]></title>
    <url>%2FMacBooster-%E7%B3%BB%E7%BB%9F%E6%B8%85%E7%90%86%E5%92%8C%E4%BC%98%E5%8C%96%E5%B7%A5%E5%85%B7Mac%E7%BB%BF%E8%89%B2%E7%89%88%2F</url>
    <content type="text"><![CDATA[简介： MacBooster是Mac os平台上的帮助用户有效清理系统缓存的Mac系统清理工具，MacBooster 还可以帮助用户提升开机的时间，优化系统自定义启动项，使电脑长时间使用都不会出现卡顿现象，操作非常的简单。 功能特点： 系统状态：通过运行全面的扫描来探索Mac的状态。 病毒和恶意软件扫描：快速，深入地分析您的Mac的安全状态。安全地删除威胁，使您的Mac保持安全。 隐私清除：通过运行全面扫描来探索Mac的状态。 系统垃圾：扫描系统的每一个角落，找出垃圾文件，保持硬盘的浪费。 卸载程序：帮助摆脱不需要的应用程序或剩下的文件。 大文件清理器：查找并删除不再需要的大文件，以释放更多的空间。 内存清理：清理以重新获得更多可用的RAM，并使应用程序启动更快。 启动优化：管理启动项以优化OS X引导速度。 碎片整理：通过一键式优化和修复磁盘的新功能。 重复查找器：快速找到并删除Mac上重复的文件。 照片扫描器：有效快速地找到类似或重复的照片。保持最美丽的。 制作的新迷你：增加实时监控网络速度和通知扫描和修复结果。 破解教程：直接安装即可。 下载地址：V7.2.3版-云盘下载 密码: pbbr V7.2.1版-云盘下载 密码: 0r90 本软件来源于网络，仅供学习使用，请在24小时内删除，本人不承担任何相关责任！若侵犯某些组织或个人的权益，请联系我删除。]]></content>
      <categories>
        <category>Mac软件分享</category>
      </categories>
      <tags>
        <tag>软件分享</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue中添加友盟代码统计]]></title>
    <url>%2FVue%E4%B8%AD%E6%B7%BB%E5%8A%A0%E5%8F%8B%E7%9B%9F%E4%BB%A3%E7%A0%81%E7%BB%9F%E8%AE%A1%2F</url>
    <content type="text"><![CDATA[如下图所示： 在入口App.vue中添加代码：123456789101112131415161718192021&lt;script&gt;export default &#123; name: 'app', mounted () &#123; const script = document.createElement('script') script.src = 'https://s95.cnzz.com/z_stat.php?id=1111111111&amp;web_id=1111111111' script.language = 'JavaScript' document.body.appendChild(script) &#125;, watch: &#123; '$route' () &#123; if (window._czc) &#123; let location = window.location let contentUrl = location.pathname + location.hash let refererUrl = '/' window._czc.push(['_trackPageview', contentUrl, refererUrl]) &#125; &#125; &#125;&#125;&lt;/script&gt;]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信小程序与vue的一些区别]]></title>
    <url>%2F%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%8Evue%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[1、条件渲染 vue使用 v-if v-else-if v-else 指令，如下： 123&lt;div v-if="color=='red'"&gt;red&lt;div&gt;&lt;div v-else-if="color=='orange'"&gt;orange&lt;div&gt;&lt;div v-else&gt;yellow&lt;div&gt; wx使用 wx:if wx:elif wx:else 指令，如下： 123&lt;view wx:if="&#123;&#123;color=='red'&#125;&#125;"&gt;red&lt;view&gt;&lt;view wx:elif="&#123;&#123;color=='orange'&#125;&#125;"&gt;orange&lt;view&gt;&lt;view wx:else&gt;yellow&lt;view&gt; 2、显示隐藏元素 vue使用 v-show 指令，如下： 1&lt;div v-show="color=='red'"&gt;red&lt;div&gt; wx使用 hidden 指令，如下： 1&lt;view hidden="&#123;&#123;color=='red'&#125;&#125;"&gt;red&lt;view&gt; 3、绑定class vue使用 v-bind: 或简写为 ： 指令，如下： 1&lt;div :class="&#123; 'class-a': isA &#125;"&gt;red&lt;div&gt; Javascript代码： 123data: &#123; isA: false //当isA改变时，将更新class&#125; wx，如下： 1&lt;view class="&#123;&#123; isA ? 'class-a':'' &#125;&#125;"&gt;red&lt;view&gt; Javascript代码： 123data: &#123; isA: false //当isA改变时，将更新class&#125; 4、事件处理 vue使用 v-on: 或 @ 指令绑定事件，如下： 1&lt;div v-on:click="counter += 1"&gt;Add 1&lt;div&gt; wx使用 baintap 指令，如下： 1&lt;view bindtap="clickMe"&gt;click&lt;view&gt; 5、绑定值 vue动态绑定一个变量的值为元素的某个属性的时候，会在变量前面加上冒号 ： ，如下： 1&lt;img :src="imgSrc"/&gt; wx绑定某个变量的值为元素属性时，会用两个大括号括起来，如下： 1&lt;img src="imgSrc"/&gt; 6、绑定事件传参 vue绑定事件的函数传参数时，可以把参数写在函数后面的括号里，如下： 1&lt;div @click="changeTab(1)"&gt;嚯嚯&lt;/div&gt; wx绑定事件的函数传参数时，可以绑定到元素中，在函数中获取，如下： 1&lt;view bindtap="changeTab()" data-tab="1"&gt;嚯嚯&lt;/view&gt; Javascript代码： `js changeTab(e) { var tab = e.currentTarget.dataset.tab } 7、设置值 vue设置test的值可以用，this.test = true ；获取test的值可以用 this.test 。 wx设置test的值要用 this.setData({test:true}) ；获取test的值用 this.data.test 。]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信小程序中setData的key是变量怎么办]]></title>
    <url>%2F%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%ADsetData%E7%9A%84key%E6%98%AF%E5%8F%98%E9%87%8F%E6%80%8E%E4%B9%88%E5%8A%9E%2F</url>
    <content type="text"><![CDATA[代码如下：123456onclick: function (e) &#123; var id = e.target.id this.setData(&#123; id: e.detail.value &#125;)&#125; 显然data中是多了一个 id 的数据，解决办法是用[]将变量括起来，如下： 123456onclick: function (e) &#123; var id = e.target.id this.setData(&#123; [id]: e.detail.value &#125;)&#125;]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信小程序中用setData修改数组或对象]]></title>
    <url>%2F%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%AD%E7%94%A8setData%E4%BF%AE%E6%94%B9%E6%95%B0%E7%BB%84%E6%88%96%E5%AF%B9%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[在 page 中有如下数组：123456789101112131415161718Page(&#123; data: &#123; list: [ &#123; id: 0, state: "running" &#125;, &#123; id: 1, state: "done" &#125;, &#123; id: 2, state: "error" &#125; ] &#125;&#125;) 若需要使用 setData 修改 list[0].state 的值为 done，若直接修改，如下： 显然报错了，解决方法如下： 先用一个字符串变量表示 list[0].state ； 再将该字符串变量用[]括起来。 如下：]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信小程序中的渐变色]]></title>
    <url>%2F%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%AD%E7%9A%84%E6%B8%90%E5%8F%98%E8%89%B2%2F</url>
    <content type="text"><![CDATA[CSS3 渐变（gradients）可以在两个或多个指定的颜色之间显示平稳的过渡。 CSS3 定义了两种类型的渐变（gradients）： 线性渐变（Linear Gradients）- 向下/向上/向左/向右/对角方向 径向渐变（Radial Gradients）- 由它们的中心定义 线性渐变 - 从上到下（默认情况下）123.gradual&#123; background: linear-gradient(red, orange); &#125; 线性渐变 - 从左到右123.gradual&#123; background: linear-gradient(to right, red, orange); &#125; 线性渐变 - 对角123.gradual&#123; background: linear-gradient(to bottom right, red, orange); &#125; 线性渐变 - 带有指定的角度123.gradual&#123; background: linear-gradient(60deg, red, orange); &#125; 线性渐变 - 从上到下，带有多个颜色结点123.gradual&#123; background: linear-gradient(red, orange, yellow); &#125; 线性渐变 - 带有彩虹颜色123.gradual&#123; background: linear-gradient(red, orange, yellow, green, blue, indigo, violet); &#125; 线性渐变 - 带有透明度123.gradual&#123; background: linear-gradient(rgba(255,0,0,1), rgba(255,0,0,0)); &#125; 重复线性渐变 - repeating-linear-gradient()函数123.gradual&#123; background: repeating-linear-gradient(red, orange, yellow 10%); &#125; 径向渐变 - 颜色结点均匀分布（默认情况下）123.gradual&#123; background: radial-gradient(red, orange, yellow); &#125; 径向渐变 - 颜色结点不均匀分布123.gradual&#123; background: radial-gradient(red 5%, orange 20%, yellow 80%); &#125; 重复径向渐变 - repeating-radial-gradient()函数123.gradual&#123; background: repeating-radial-gradient(red, orange, yellow 10%); &#125;]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信小程序如何获取屏幕的高度和宽度]]></title>
    <url>%2F%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E5%B1%8F%E5%B9%95%E7%9A%84%E9%AB%98%E5%BA%A6%E5%92%8C%E5%AE%BD%E5%BA%A6%2F</url>
    <content type="text"><![CDATA[微信小程序如何获取屏幕的高度和宽度 方法一：12var windowHeight = wx.getSystemInfoSync().windowHeightvar windowWidth = wx.getSystemInfoSync().windowWidth 方法二： 1234.windowHeightWidthClass &#123; height: 100vh; width: 100vw;&#125; CSS3中的 vh 和 vw 是相对于屏幕大小的单位，即：vh =&gt; view heightvw =&gt; view width]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[UltraEdit-文本编辑器Mac绿色版]]></title>
    <url>%2FUltraEdit-%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8Mac%E7%BB%BF%E8%89%B2%E7%89%88%2F</url>
    <content type="text"><![CDATA[简介： Ultraedit是一款在Windows系统中非常出名的文本编辑器，可以编辑文本、十六进制、ASCII 码，完全可以取代其他文本工具，同时还支持许多开发语言，如 C, Objective C, Javascript, XML, PHP, Perl, Python等，并可同时编辑多个文件，而且即使开启很大的文件速度也不会慢。 功能特点： 可配置语法加亮，支持代码折叠、Unicode； 基于磁盘的文本编辑和支持超过 4GB 的大文件处理，即使是数兆字节的文件也只占用极少的内存； 在所有搜索操作（查找、替换、在文件中查找、在文件中替换）中，支持多行查找和替换对话框； 带有 100,000 个单词的拼写检查器，对 C/C++、VB、HTML、Java 和 Perl 进行了预配置； 内置 FTP 客户端，支持登录和保存多个账户，支持SSH/Telnet 窗口； 提供预定义的或用户创建的编辑“环境”，能记住 UltraEdit 的所有可停靠窗口、工具栏等的状态； 集成脚本语言以自动执行任务，可配置键盘映射，列/块模式编辑，命名的模板； 十六进制编辑器可以编辑任何二进制文件，并显示二进制和 ASCII 视图； HTML 工具栏，对常用的 HTML 功能作了预配置；文件加密/解密；多字节和集成的 IME。 网络搜索工具栏：高亮显示文本并单击网络搜索工具栏按钮，从编辑器内启动搜索加亮词语。 破解教程：直接安装即可。 下载地址：V18.0.00.40版-云盘下载 密码: uroj 本软件来源于网络，仅供学习使用，请在24小时内删除，本人不承担任何相关责任！若侵犯某些组织或个人的权益，请联系我删除。]]></content>
      <categories>
        <category>Mac软件分享</category>
      </categories>
      <tags>
        <tag>软件分享</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue中动态设置页面title]]></title>
    <url>%2FVue%E4%B8%AD%E5%8A%A8%E6%80%81%E8%AE%BE%E7%BD%AE%E9%A1%B5%E9%9D%A2title%2F</url>
    <content type="text"><![CDATA[安装依赖 1npm install vue-wechat-title --save 在mian.js中引入 123//设置titleimport VueWechatTitle from 'vue-wechat-title'Vue.use(VueWechatTitle) 在router的index.js的路由中加上参数 1234567&#123; path: '/login', component: Login, meta: &#123; title: '登录' &#125;&#125;]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue中使用base64编码和解码]]></title>
    <url>%2FVue%E4%B8%AD%E4%BD%BF%E7%94%A8base64%E7%BC%96%E7%A0%81%E5%92%8C%E8%A7%A3%E7%A0%81%2F</url>
    <content type="text"><![CDATA[在项目根目录下安装 1npm install --save js-base64 在项目文件中引入 1let Base64 = require('js-base64').Base64 在项目文件中使用 12Base64.encode('潘高') // 5r2Y6auYBase64.decode('5r2Y6auY') // 潘高]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Perl递归删除文件夹及其内容]]></title>
    <url>%2FPerl%E9%80%92%E5%BD%92%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E5%A4%B9%E5%8F%8A%E5%85%B6%E5%86%85%E5%AE%B9%2F</url>
    <content type="text"><![CDATA[123use File::Path qw(remove_tree);remove_tree($zipFiles."/tem/");]]></content>
      <categories>
        <category>Perl</category>
      </categories>
      <tags>
        <tag>Perl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Perl解压zip]]></title>
    <url>%2FPerl%E8%A7%A3%E5%8E%8Bzip%2F</url>
    <content type="text"><![CDATA[12345678910111213use Archive::Zip;my $obj = Archive::Zip-&gt;new();$status = $obj-&gt;read($fileFrom);if ($status != AZ_OK) &#123; print "=====程序终止！=====\n解压失败\n"; #保留黑框 system pause; #程序停止运行 die;&#125; else &#123; $obj-&gt;extractTree(undef, $fileTo);&#125;]]></content>
      <categories>
        <category>Perl</category>
      </categories>
      <tags>
        <tag>Perl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用生物信息学格式介绍]]></title>
    <url>%2F%E5%B8%B8%E7%94%A8%E7%94%9F%E7%89%A9%E4%BF%A1%E6%81%AF%E5%AD%A6%E6%A0%BC%E5%BC%8F%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[fastafasta （维基百科）格式是最基本的表示序列信息（核苷酸或者蛋白质）的格式。这里简单介绍下，fasta格式的文件通常后缀名为 .fasta 或者 .fa ，其实这都无所谓，因为都是文本文件。 fasta 格式文件（可以包含多条序列）中的一条序列的通常表示方法如下： 12345&gt;gi|129295|sp|P01013|OVAX_CHICK GENE X PROTEIN (OVALBUMIN-RELATED)QIKDLLVSSSTDLDTTLVLVNAIYFKGMWKTAFNAEDTREMPFHVTKQESKPVQMMCMNNSFNVATLPAEKMKILELPFASGDLSMLVLLPDEVSDLERIEKTINFEKLTEWTNPNTMEKRRVKVYLPQMKIEEKYNLTSVLMALGMTDLFIPSANLTGISSAESLKISQAVHGAFMELSEDGIEMAGSTGVIEDIKHSPESEQFRADHPFLFLIKHNPTNTIVYFGRYWSP 其中主要分为两个部分： 第一部分是序列的定义行（单行），该行的开头是&gt;符号，紧跟着后面的就是该条序列的名称（具有唯一性，即不能和其它序列同名称），即&gt;号和后面的名称的第一字符间是没有任何空白的。一般第一个空格后面的内容即为可选的描述信息。如上面， gi|129295|sp|P01013|OVAX_CHICK为序列名称， 而GENE X PROTEIN (OVALBUMIN-RELATED)则为描述信息。注意：有点软件是把一整行当做名称的，所以在出现错误的时候可以查看下格式是否正确。 第二部分就是序列，所有的序列碱基或者氨基酸可以都放在一行存储，也可以多行存储，但是建议大家多行存储且单行长度不超过80个字符，因为这样容易阅读。且序列的多行之间不能有空行，序列信息描述的第一行与序列数据的第一行之间不能有空行。其中序列数据主要是按照密码表来表示的，*表示是蛋白质翻译的结束。 多行序列举例如下：12345678&gt;SEQUENCE_1MTEITAAMVKELRESTGAGMMDCKNALSETNGDFDKAVQLLREKGLGKAAKKADRLAAEGLVSVKVSDDFTIAAMRPSYLSYEDLDMTFVENEYKALVAELEKENEERRRLKDPNKPEHKIPQFASRKQLSDAILKEAEEKIKEELKAQGKPEKIWDNIIPGKMNSFIADNSQLDSKLTLMGQFYVMDDKKTVEQVIAEKEKEFGGKIKIVEFICFEVGEGLEKKTEDFAAEVAAQL&gt;SEQUENCE_2SATVSEINSETDFVAKNDQFIALTKDTTAHIQSNSLQSVEELHSSTINGVKFEEYLKSQIATIGENLVVRRFATLKAGANGVVNGYIHTNGRVGVVIAAACDSAEVASKSRDLLRQICMH fastqfastq 同样是以文本形式来存储序列信息的格式，后缀名通常为 .fastq 或者 .fq ，但是与 fasta 不相同的是，它除了存储序列本身外还存储了序列中每个单元所对应的质量分数，所以 fastq 格式通常用于高通量测试数据的存储。早期是有 Sanger 机构开发的，但是现在已经演变成一个高通量测序的标准了。 fastq 格式文件中一个完整的单元分为四行，每行的含义如下：第一行： 以@开头，内容同fasta的描述行类似第二行：具体的碱基序列第三行：以+开头，后面的内容可以和第一行类似，也什么都没有只留+第四行：以ASCII字符集（分数）编码来表示对应碱基的测序质量 比如下面的这个例子：1234@SEQ_IDGATTTGGGGTTCAAAGCAGTATCGATCAAATAGTAAATCCATTTGTTCAACTCACAGTTT+!&apos;&apos;*((((***+))%%%++)(%%%%).1***-+*&apos;&apos;))**55CCF&gt;&gt;&gt;&gt;&gt;&gt;CCCCCCC65 下面以Illumina和NCBI SRA两个测序数据来源来讲讲它们之间的区别：通常我们获取测序数据有两种途径，一种是自己通过仪器测定，一种是在公共数据库中(比如之前说到的 NCBI 中的 SRA 数据库)获取，这两种方式主要是在序列名称的命名上和测序质量表示方式上有所不同。 Illumina 序列名称：1@HWUSI-EAS100R:6:73:941:1973#0/1 上述以：隔开的每个字段的含义如下： HWUSI-EAS100R the unique instrument name 6 flowcell lane 3 tile number within the flowcell lane 941 ‘x’-coordinate of the cluster within the tile 1973 ‘y’-coordinate of the cluster within the tile #0 index number for a multiplexed sample (0 for no indexing) /1 the member of a pair, /1 or /2 (paired-end or mate-pair reads only) NCBI SRA 数据库将测序数据提交到 NCBI 的 SRA 数据库时， SRA 数据库会为每一个样本提供一个编号，一般是 SRRxxxxx ，所以从 SRA 数据库上下载公共的测试数据（原始格式为 .sra ， 需特定工具转换为 fastq ），其 fastq 格式文件中每个单元的名称是以 SRA 编号接数字加以区分的。比如下面的这个示例：1234@SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=36GGGTGATGGCCGCTGCCGATGGCGTCAAATCCCACC+SRR001666.1 071112_SLXA-EAS1_s_7:5:1:817:345 length=36IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9IC 需要注意的是：当把测序数据上传到 SRA 数据库时，它通常会将表示质量的分数 转换为标准的 Sanger 格式 。 质量分数表示法：由于测序仪器的不同等因素所以对碱基测序质量的表示方式也不相同，在 Fastq 格式文件中，用ASCII码表来表示每个碱基的测序质量，下面介绍几种不同的方案：其中有五种表示方法，Sanger 的码表范围为 ! 至 I ，其对应的数值为 33-73，如果减去 33（即 Phred + 33 表示法）这个基数则范围转换为 0-40，即如果某一个碱基的测序质量为 ! 则对应的测序质量分数为 0，表示测序质量低。其它几种表示法类似（X,I,J,L）。这里介绍测序质量的表示方法是因为后面有的软件是要指定测序数据的质量表示方法。 gff2GFF(General Feature Format)是一种用于描述基因或者其它序列元素的文件格式，GFF 有几个版本，早期的第 Version 2 和现在的 Version 3. Version 2 是由 Sanger 机构所制定的，而 Version 3 是由 Sequence Ontology Project 制定。正是由于有统一的格式来表示基因等元素，使得 GFF 格式的文件被广泛的使用与 mapping 与基因组数据可视化方面。GFF2 文件格式是由 tab 隔开的九列值，每一行的九个字段的含义如下：1Chr1 curated CDS 365647 365963 . + 1 Transcript &quot;R119.7&quot; 第一列： reference sequence， 该列表示的是特征元素所在的染色体（或者scaffold，或者contig），也就是在基因组中的坐标系统，后续一切的注释信息都是基于此列。第二列：source，该列表示改行注释信息的来源，比如上述的一行表示该行的CDS注释信息来自名为“curated”的注释。第三列：feature，或者说是method，type， 表示的是该注释的类型，比如上述表示改行注释为CDS信息，可以将source和feature结合起来描述的更加详细。第四列：start position，在reference sequence上的开始位置（坐标），通常是从1为起点而不是0。第五列：end position， 在reference sequence上的结束位置（坐标），一般是大于start position的。第六列：score， 表示该行feature的分数，比如序列相似性等，如果没有对应的分数可以用.代替。第七列：strand，feature所在链，+表示正链，-表示负链，.表示不确定或者与链无关。第八列：phase，与蛋白质编码相关，一般是用于CDS，值的范围为0-2，表示编码时阅读框的移动相位。下面这段描述很详细:‘0’ indicates that the specified region is in frame, i.e. that its first base corresponds to the first base of a codon. ‘1’ indicates that there is one extra base, i.e. that the second base of the region corresponds to the first base of a codon, and ‘2’ means that the third base of the region is the first base of a codon. If the strand is ‘-‘, then the first base of the region is value of , because the corresponding coding region will run from to on the reverse strand.第九列：group，或者称为attributes，是用于对改行注释更多的描述，以键值对的形式，比如上面的例子表示该CDS是属于名为R119.7的transcript。该列中可以存在多个属性，属性之间是用;隔开的。对于GFF格式的理解主要是集中在最后一列，有以下集中情况： 对于单个feature 1Chr3 giemsa heterochromatin 4500000 6000000 . . . Band 3q12.1 对于属于同一集合的多个feature 1234IV curated exon 5506900 5506996 . + . Transcript B0273.1IV curated exon 5506026 5506382 . + . Transcript B0273.1IV curated exon 5506558 5506660 . + . Transcript B0273.1IV curated exon 5506738 5506852 . + . Transcript B0273.1 比如上面这个例子就表示这四个exon都是属于同一个名为B0273.1的transcript，这是表示一个完整transcript结构的最基本要求。GFF2还可用于序列比对结果表示等其它方面，这里不做介绍了。 gtf(gff2.5)GTF（Gene Transfer Format）格式是借鉴于GFF2格式，也被称为GFF2.5，大部分字段的定义是和GFF2相同的，只是每行的第九列必须带有如下四个域，具体为gene_id value; transcript_id value; 这样的设计是为了适应一个基因的多个转录本这种情况。比如下面的这个例子：123456AB000123 Twinscan CDS 193817 194022 . - 2 gene_id &quot;AB000123.1&quot;; transcript_id &quot;AB00123.1.2&quot;;AB000123 Twinscan CDS 199645 199752 . - 2 gene_id &quot;AB000123.1&quot;; transcript_id &quot;AB00123.1.2&quot;;AB000123 Twinscan CDS 200369 200508 . - 1 gene_id &quot;AB000123.1&quot;; transcript_id &quot;AB00123.1.2&quot;;AB000123 Twinscan CDS 215991 216028 . - 0 gene_id &quot;AB000123.1&quot;; transcript_id &quot;AB00123.1.2&quot;;AB000123 Twinscan start_codon 216026 216028 . - . gene_id &quot;AB000123.1&quot;; transcript_id &quot;AB00123.1.2&quot;;AB000123 Twinscan stop_codon 193814 193816 . - . gene_id &quot;AB000123.1&quot;; transcript_id &quot;AB00123.1.2&quot;; gff3GFF2（维基百科）格式早期用的比较多，但是现在用的多的是GFF3格式，这也是好多软件所支持的，比如Gbrowse， Jbrowse等基因组数据可视化工具。先看下面这个简单的例子：123456##gff-version 3ctg123 . exon 1300 1500 . + . ID=exon00001ctg123 . exon 1050 1500 . + . ID=exon00002ctg123 . exon 3000 3902 . + . ID=exon00003ctg123 . exon 5000 5500 . + . ID=exon00004ctg123 . exon 7000 9000 . + . ID=exon00005 第一行的##gff-version 3通常是需要的，而且必须是在文件的第一行。前八列和GFF2、GFF2.5类似，但是有几点是要特别注意的，主要是将GFF3注释数据用于基因组浏览器时，字段中的一些特殊字符比如空格，&gt; %等都需要使用URL编码进行转换才能准确的在web中进行展示。第九列同样是表示attributes，采用的同样是键值对的形式（tag=value），只是这里有几个特定的键，具体如下：ID，feature在整个GFF3文件中唯一的标识符；Name，feature的名字，不同于ID，Name不要求唯一，只是方便用户浏览；Alias， 相当于feature的别名；Parent，表明该feature所属的上一级feature 的ID，这种关系可用于exons-transcripts，transcripts-genes，可以看出一个feature可以拥有多个子feature；Target， 主要是用于序列比对结果的展示，value的格式为target_id start end [strand], 其中如果target_id中含有空格则需转换为%20；后面还有些其它属性比如Note等，这里不再做详细描述。下面再来看下典型的例子： 蛋白质编码基因结构 123456789101112131415161718192021222324ctg123 example gene 1050 9000 . + . ID=EDEN;Name=EDEN;Note=protein kinasectg123 example mRNA 1050 9000 . + . ID=EDEN.1;Parent=EDEN;Name=EDEN.1;Index=1ctg123 example five_prime_UTR 1050 1200 . + . Parent=EDEN.1ctg123 example CDS 1201 1500 . + 0 Parent=EDEN.1ctg123 example CDS 3000 3902 . + 0 Parent=EDEN.1ctg123 example CDS 5000 5500 . + 0 Parent=EDEN.1ctg123 example CDS 7000 7608 . + 0 Parent=EDEN.1ctg123 example three_prime_UTR 7609 9000 . + . Parent=EDEN.1ctg123 example mRNA 1050 9000 . + . ID=EDEN.2;Parent=EDEN;Name=EDEN.2;Index=1ctg123 example five_prime_UTR 1050 1200 . + . Parent=EDEN.2ctg123 example CDS 1201 1500 . + 0 Parent=EDEN.2ctg123 example CDS 5000 5500 . + 0 Parent=EDEN.2ctg123 example CDS 7000 7608 . + 0 Parent=EDEN.2ctg123 example three_prime_UTR 7609 9000 . + . Parent=EDEN.2ctg123 example mRNA 1300 9000 . + . ID=EDEN.3;Parent=EDEN;Name=EDEN.3;Index=1ctg123 example five_prime_UTR 1300 1500 . + . Parent=EDEN.3ctg123 example five_prime_UTR 3000 3300 . + . Parent=EDEN.3ctg123 example CDS 3301 3902 . + 0 Parent=EDEN.3ctg123 example CDS 5000 5500 . + 1 Parent=EDEN.3ctg123 example CDS 7000 7600 . + 1 Parent=EDEN.3ctg123 example three_prime_UTR 7601 9000 . + . Parent=EDEN.3 一个名为EDEN的基因拥有三个转录本，分别名为EDEN.1 EDEN.2 EDEN.3， 每个转录本又有UTR和CDS等信息。 序列比对 123456789ctg123 est EST_match 1050 1500 . + . ID=Match1;Name=agt830.5;Target=agt830.5 1 451ctg123 est EST_match 3000 3202 . + . ID=Match1;Name=agt830.5;Target=agt830.5 452 654ctg123 est EST_match 5410 5500 . - . ID=Match2;Name=agt830.3;Target=agt830.3 505 595ctg123 est EST_match 7000 7503 . - . ID=Match2;Name=agt830.3;Target=agt830.3 1 504ctg123 est EST_match 1050 1500 . + . ID=Match3;Name=agt221.5;Target=agt221.5 1 451ctg123 est EST_match 5000 5500 . + . ID=Match3;Name=agt221.5;Target=agt221.5 452 952ctg123 est EST_match 7000 7300 . + . ID=Match3;Name=agt221.5;Target=agt221.5 953 1253 定量数据 123456ctg123 affy microarray_oligo 1 100 281 . . Name=Expt1ctg123 affy microarray_oligo 101 200 183 . . Name=Expt1ctg123 affy microarray_oligo 201 300 213 . . Name=Expt1ctg123 affy microarray_oligo 301 400 191 . . Name=Expt1ctg123 affy microarray_oligo 401 500 288 . . Name=Expt1ctg123 affy microarray_oligo 501 600 184 . . Name=Expt1 含Fasta格式的GFF3格式文件 123456789101112131415##gff-version 3ctg123 . exon 1300 1500 . + . ID=exon00001ctg123 . exon 1050 1500 . + . ID=exon00002ctg123 . exon 3000 3902 . + . ID=exon00003ctg123 . exon 5000 5500 . + . ID=exon00004ctg123 . exon 7000 9000 . + . ID=exon00005##FASTA&gt;ctg123cttctgggcgtacccgattctcggagaacttgccgcaccattccgccttgtgttcattgctgcctgcatgttcattgtctacctcggctacgtgtggctatctttcctcggtgccctcgtgcacggagtcgagaaaccaaagaacaaaaaaagaaattaaaatatttattttgctgtggtttttgatgtgtgttttttataatgatttttgatgtgaccaattgtacttttcctttaaatgaaatgtaatcttaaatgtatttccgacgaattcgaggcctgaaaagtgtgacgccattc... 该GFF3文件中含有对应的序列，以##FASTA作为标示。 bedbed（genome介绍、bedtools介绍、 asia介绍）格式同样是用于展示序列注释信息，有相应的软件来处理这类格式的文件，如bedtools。可以用在类似GBrowse这样的基因组数据可视化工具中。 以tab隔开，它必须的三个字段为 chrom、chromStart、chromEnd，还有9个可选字段。注意：用于在GBrowse上展示相关注释的bed格式通常第一行有一个关于track的描述信息。比如下面的例子：123track name=pairedReads description=&quot;Clone Paired Reads&quot; useScore=1chr22 1000 5000 cloneA 960 + 1000 5000 0 2 567,488, 0,3512chr22 2000 6000 cloneB 900 - 2000 6000 0 2 433,399, 0,3601 sam/bamhttp://blog.sina.com.cn/s/blog_670445240101l30k.htmlhttp://genome.sph.umich.edu/wiki/SAMhttps://samtools.github.io/hts-specs/SAMv1.pdf在生物信息学中尤其是高通量测序数据分析中，大部分的操作都是在实现短片段序列与参考序列的比对（mapping），比如bowtie等，这就涉及到如何使用一个统一的格式来表示这种mapping结果呢，sam（Sequence Alignment/Map）格式就是来解决这个问题的。sam文件拥有头部描述和详细比对两部分，其中头部描述是以@开头，后面紧跟两个缩写字母表示相应的含义，SAM分为两部分，注释信息（header section）和比对结果部分（alignment section），注释信息可有可无，都是以@开头，用不同的tag表示不同的信息，主要有@HD，说明符合标准的版本、对比序列的排列顺序；@SQ，参考序列说明；@RG，比对上的序列（read）说明；@PG，使用的程序说明；@CO，任意的说明信息。而详细比对部分是通过11个tab隔开的字段来表示。下面主要讲解下详细比对部分字段的具体含义：其中： QNAME 表示的是查询序列的名称即短片段（reads）的名称； FLAG 以整数来表示比对的结果，不同数值有不同的意义，数值也可以是下列数的组合； 比如如果FLAG是4的话则表示该reads没有比对到参考序列上，flag为16表示single-end reads比对到参考序列的反链上，flag为83（64+16+2+1）表示paired-end reads中的第一个reads比对到参考序列上了。 RNAME 表示参考序列的名称，比如基因组的染色体编号等，如果没有比对上则显示为*； POS 表示比对的起始位置，以1开始计数，如果没有比对上则显示为0； MAPQ 比对质量； CIGAR CIGAR 字符串，即比对的详细情况，简要比对信息表达式（Compact Idiosyncratic Gapped Alignment Report），其以参考序列为基础，使用数字加字母表示比对结果，比如3S6M1P1I4M，前三个碱基被剪切去除了，然后6个比对上了，然后打开了一 个缺口，有一个碱基插入，最后是4个比对上了，是按照顺序的； RNEXT 双末端测序中下一个reads比对的参考系列的名称，如果没有则用*表示，如果和前一个reads比对到同一个参考序列则用=表示； PNEXT 下一个reads比对到参考序列上的位置，如果没有则用0表示； ISIZE/TLEN query序列的模板长度或者插入长度，Template的长度，最左边得为正，最右边的为负，中间的不用定义正负，不分区段（single-segment)的比对上，或者不可用时，此处为0； reads的序列信息； reads的序列质量信息，同FASTQ。后面还有些可选字段，比如：可选字段（optional fields)，格式如：TAG:TYPE:VALUE，其中TAG有两个大写字母组成，每个TAG代表一类信息，每一行一个TAG只能出现一次，TYPE表示TAG对应值的类型，可以是字符串、整数、字节、数组等。示例：1234:497:R:-272+13M17D24M 113 1 497 37 37M 15 100338662 0 CGGGTCTGACCTGAGGAGAACTGTGCTCCGCCTTCAG 0;==-==9;&gt;&gt;&gt;&gt;&gt;=&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;=&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; XT:A:U NM:i:0 SM:i:37 AM:i:0 X0:i:1 X1:i:0 XM:i:0 XO:i:0 XG:i:0 MD:Z:37:20389:F:275+18M2D19M 99 1 17644 0 37M = 17919 314 TATGACTGCTAATAATACCTACACATGTTAGAACCAT &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&lt;&lt;&gt;&gt;&gt;&lt;&lt;&gt;&gt;4::&gt;&gt;:&lt;9 RG:Z:UM0098:1 XT:A:R NM:i:0 SM:i:0 AM:i:0 X0:i:4 X1:i:0 XM:i:0 XO:i:0 XG:i:0 MD:Z:37:20389:F:275+18M2D19M 147 1 17919 0 18M2D19M = 17644 -314 GTAGTACCAACTGTAAGTCCTTATCTTCATACTTTGT ;44999;499&lt;8&lt;8&lt;&lt;&lt;8&lt;&lt;&gt;&lt;&lt;&lt;&lt;&gt;&lt;7&lt;;&lt;&lt;&lt;&gt;&gt;&lt;&lt; XT:A:R NM:i:2 SM:i:0 AM:i:0 X0:i:4 X1:i:0 XM:i:0 XO:i:1 XG:i:2 MD:Z:18^CA19:21597+10M2I25M:R:-209 83 1 21678 0 8M2I27M = 21469 -244 CACCACATCACATATACCAAGCCTGGCTGTGTCTTCT &lt;;9&lt;&lt;5&gt;&lt;&lt;&lt;&lt;&gt;&lt;&lt;&lt;&gt;&gt;&lt;&lt;&gt;&lt;&gt;&gt;&lt;9&gt;&gt;&lt;&gt;&gt;&gt;9&gt;&gt;&gt;&lt;&gt; XT:A:R NM:i:2 SM:i:0 AM:i:0 X0:i:5 X1:i:0 XM:i:0 XO:i:1 XG:i:2 MD:Z:35 解释： 其中可以看出Aligenment 2 和 Alignment 3是成对的reads，其插入长度为314。bam格式中的b是binary的意思，是sam格式的二进制表示方式，为什么要用二进制表示呢？ 因为sam格式文件大小通常是十分大的，一般是以G为单位，所以为了减少存储量等因素而将sam转换为二进制格式以便于分析。sam/bam格式是由特定的一些软件（比如samtools）来处理的，包括格式互转、排序、建立索引、搜寻突变等操作，后续分析中会详细讲解samtools工具的使用方法。 vcfvcf（Variant Call Format）格式是用于表示突变信息的文本格式，可以用来表示single nucleotide variants, insertions/deletions, copy number variants and structural variants等。VCF格式同样是分为两大部分，一部分是注释描述信息，一部分是具体的突变信息，其中注释信息是以##开头的，我们来看下面这个例子：我们着重来关注第二部分的每列字段是什么含义：CHROM 即chromosome， 染色体名称；POS 即position， 发生突变的参考序列的位置（从1开始计数）；ID 突变的名称；REF 参考序列POS上的碱基；ALT 发生突变的碱基，多个的话以,连接， 可选符号为ATCGN*，大小写敏感；QUAL 基于Phred格式的表示ALT的质量，也可以理解为可靠性；FILTER 过滤后的状态，即按照可靠性进行筛选；INFO 额外信息，可结合注释描述信息进行理解针对vcf格式有如bcftools等软件进行处理。]]></content>
      <categories>
        <category>生物信息分析</category>
      </categories>
      <tags>
        <tag>生物信息分析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[生物信息分析中的测序概念]]></title>
    <url>%2F%E7%94%9F%E7%89%A9%E4%BF%A1%E6%81%AF%E5%88%86%E6%9E%90%E4%B8%AD%E7%9A%84%E6%B5%8B%E5%BA%8F%E6%A6%82%E5%BF%B5%2F</url>
    <content type="text"><![CDATA[De Novo测序：De Novo测序也叫从头测序，是首次对一个物种的基因组进行测序，用生物信息学的分析方法对测序所得序列进行组装，从而获得该物种的基因组序列图谱。 全基因组重测序：全基因组重测序是对已知基因组序列的物种进行不同个体的基因组测序，然后运用生物信息学分析手段对序列进行拼接，组装，从而获得该个体的基因组图谱；或者对不同组织（如肿瘤）进行测序，分析体细胞突变。 转录组测序(RNA-seq)：转录组是某个物种或者特定细胞类型产生的所有转录本的集合，转录组测序(RNA-seq) 是最近发展起来的利用深度测序技术进行转录分析的方法,可以对全转录组进行系统的研究。 宏基因组测序：宏基因组测序，是对特定环境样品中的微生物群体基因组(尤其是那些种类众多的难于培养的微生物)，进行序列测定和功能基因的发掘，来分析微生物群体基因组成及功能，解读微生物群体的多样性与丰度，发掘和研究新的、具有特定功能的基因。 目标序列捕获测序：目标序列捕获测序，是将感兴趣的基因组区域定制成特异性探针与基因组DNA进行杂交（固相或液相），将目标基因组区域的DNA片段进行富集后再利用第二代测序技术进行测序。这种新的方法与PCR方法相比，通量高，同时能节省大量的时间及成本。 测序深度（Sequencing Depth）：测序得到的碱基总量（bp）与基因组大小（Genome）的比值，它是评价测序量的指标之一。测序深度与基因组覆盖度之间是一个正相关的关系，测序带来的错误率或假阳性结果会随着测序深度的提升而下降。 覆盖度（Coverage）：如果一条100bp的序列，我们仅测到80bp，就说这一条序列的覆盖度是80%。]]></content>
      <categories>
        <category>生物信息分析</category>
      </categories>
      <tags>
        <tag>生物信息分析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[生物信息分析中的reads是什么]]></title>
    <url>%2F%E7%94%9F%E7%89%A9%E4%BF%A1%E6%81%AF%E5%88%86%E6%9E%90%E4%B8%AD%E7%9A%84reads%E6%98%AF%E4%BB%80%E4%B9%88%2F</url>
    <content type="text"><![CDATA[测序得到的原始图像数据经 base calling 转化为序列数据，我们称之为 raw data 或 raw reads ，结果以 fastq 文件格式存储， fastq 文件为用户得到的最原始文件，里面存储 reads 的序列以及 reads 的测序质量。在 fastq 格式文件中每个 read 由四行描述： 1234@read IDTGGCGGAGGGATTTGAACCC+bbbbbbbbabbbbbbbbbbb Single-end(SE)测序：1个fastq文件 Pair-end(PE)测序：2个fastq文件分别存放read1和read2的数据 每个序列共有4行，第1行和第3行是序列名称(有的 fq 文件为了节省存储空间会省略第三行“＋”后面的序列名称)；第2行是序列；第4行是序列的测序质量，每个字符对应第2行每个碱基，第4行每个字符对应的 ASCII 值减去64，即为该碱基的测序质量值，比如 h 对应的 ASCII 值为104，那么其对应的碱基质量值是40。碱基质量值范围为0到40。下表为 Solexa 测序错误率与测序质量值简明对应关系，具体计算公式如下：1Q = -10 log10P Solexa测序错误率与测序质量值简明对应关系:]]></content>
      <categories>
        <category>生物信息分析</category>
      </categories>
      <tags>
        <tag>生物信息分析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[外显子、内含子、mRNA、CDS、ORF的区别与联系]]></title>
    <url>%2F%E5%A4%96%E6%98%BE%E5%AD%90%E3%80%81%E5%86%85%E5%90%AB%E5%AD%90%E3%80%81mRNA%E3%80%81CDS%E3%80%81ORF%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E8%81%94%E7%B3%BB%2F</url>
    <content type="text"><![CDATA[DNA 复制： 概念： DNA 复制：以 DNA 为模板，在 DNA 聚合酶的催化作用下，将四种游离的 dNTP 按照碱基互补配对原则合成新链 DNA 。 转录：以 DNA 为模版，在 DNA 指导的 RNA 聚合酶的作用下，将四种游离的 NTP 按照碱基互补配对的原则合成 RNA 。 翻译：以 mRNA 为模板，在核糖体内合成蛋白质的过程。 特点： DNA 复制：模板为双链 DNA ，合成的新链与模板链一模一样，原料为四种dNTP ，为半保留复制，需要引物。 转录：模板为双链 DNA ，为半不连续转录需要引物，原料为四种 NTP ，合成的新链除了把 DNA 上的 T 改为 U 外，其他一样。 翻译： 模板为 mRNA ，原料为20中游离的氨基酸，3 个碱基决定一个氨基酸。 mRNA：mRNA（messenger RNA，信使RNA）信使 RNA 是由 DNA 经 hnRNA 剪接而成，携带遗传信息的能指导蛋白合成的一类单链核糖核酸。 外显子和内含子：基因 DNA 分为编码区和非编码区，编码区包含外显子和内含子，一般非编码区具有基因表达的调控功能，如启动子在非编码区。编码区则转录为 mRNA 并最终翻译成蛋白质。外显子和内含子都被转录到 mRNA 前体 hnRNA 中，当 hnRNA 进行剪接变为成熟的 mRNA 时，内含子被切除，而外显子保留。实际上真正编码蛋白质的是外显子，而内含子则无编码功能。内含子存在于DNA 中，在转录的过程中，DNA 上的内含子也会被转录到前体 RNA 中，但前体 RNA 上的内含子会在 RNA 离开细胞核进行翻译前被切除。 CDS：Sequencecodingfor aminoacids in protein 蛋白质编码区 CDS 是Codingsequence的缩写，是编码一段蛋白产物的序列，是结构基因组学术语。 开放读码框ORF开放读码框是从一个起始密码子开始到一个终止密码子结束的一段序列；不是所有读码框都能被表达出蛋白产物，或者能表达出占有优势或者能产生生物学功能的蛋白。 CDS，是编码一段蛋白产物的序列。CDS 必定是一个 ORF 。但也可能包括很多 ORF 。反之，每个 ORF 不一定都是 CDS 。 外显子与 CDS 区不是完全一致的，CDS 区一定属于外显子，但是外显子不一定是 CDS 区，也就是说外显子不一定都能翻译成蛋白的。 mRNA 包括 UTR 和 CDS ！]]></content>
      <categories>
        <category>生物信息分析</category>
      </categories>
      <tags>
        <tag>生物信息分析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ParallelsDesktop-虚拟机Mac绿色版]]></title>
    <url>%2FParallelsDesktop-%E8%99%9A%E6%8B%9F%E6%9C%BAMac%E7%BB%BF%E8%89%B2%E7%89%88%2F</url>
    <content type="text"><![CDATA[简介： Parallels Desktop是一款运行在 Mac 电脑上的极为优秀的虚拟机软件。用户可以在 Mac OS X 下非常方便运行 Windows、Linux 等操作系统及应用。用户不必繁琐重复地重启电脑即可在 Win 与 Mac 之间切换甚至同时使用它们。 破解教程：压缩包内含教程。 下载地址：V140145154版-云盘下载 密码: 9mhd 本软件来源于网络，仅供学习使用，请在24小时内删除，本人不承担任何相关责任！若侵犯某些组织或个人的权益，请联系我删除。]]></content>
      <categories>
        <category>Mac软件分享</category>
      </categories>
      <tags>
        <tag>软件分享</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Perl处理Excel]]></title>
    <url>%2FPerl%E5%A4%84%E7%90%86Excel%2F</url>
    <content type="text"><![CDATA[123456789101112131415161718192021222324252627282930313233343536373839404142434445use FindBin qw($Bin);use Win32::OLE qw(in with);use Win32::OLE::Const 'Microsoft Excel';#判断excel是否已经打开my $isOpen = 1; #已经打开if(rename $Bin."/".$file,$Bin."/re-".$file)&#123;rename $Bin."/re-".$file,$Bin."/".$file;$isOpen = 0; #未打开&#125;my $Excel = Win32::OLE-&gt;GetActiveObject('Excel.Application') || Win32::OLE-&gt;new('Excel.Application', 'Quit');#不显示警告窗口$Excel-&gt;&#123;DisplayAlerts&#125; = 0;my $Book = $Excel-&gt;Workbooks-&gt;Open($file);my $Sheet = $Book-&gt;Worksheets(1); #my $Sheet = $Book-&gt;Worksheets($sheetName); #my $SheetName = $Book-&gt;Worksheets(1)-&gt;&#123;Name&#125;; my $maxRow = $Sheet-&gt;UsedRange-&gt;Rows-&gt;Count;my $maxCol = $Sheet-&gt;UsedRange-&gt;Columns-&gt;Count;foreach my $row(1..$maxRow)&#123;foreach my $col(1..$maxCol)&#123;#隐藏的单元格，过滤next if $Sheet-&gt;Range("$row:$row")-&gt;EntireRow-&gt;&#123;Hidden&#125;;my $value = $Sheet-&gt;Cells($row,$col)-&gt;&#123;Value&#125;;$Sheet-&gt;Cells($row,$col)-&gt;Interior-&gt;&#123;Color&#125; = $InColor;$sheet -&gt; Range("G7:H7") -&gt; Font -&gt; &#123;Bold&#125; = "True";$sheet -&gt; Range("G7:H7") -&gt; Font -&gt; &#123;Italic&#125; = "True";$sheet -&gt; Range("G7:H7") -&gt; Font -&gt; &#123;Underline&#125; = xlUnderlineStyleSingle;$sheet -&gt; Range("G7:H7") -&gt; Font -&gt; &#123;Size&#125; = 8;$sheet -&gt; Range("G7:H7") -&gt; Font -&gt; &#123;Name&#125; = "Arial";$sheet -&gt; Range("G7:H7") -&gt; Font -&gt; &#123;ColorIndex&#125; = 4;$sheet -&gt; Range('A:A') -&gt; &#123;ColumnWidth&#125; = 9.14;$sheet -&gt; Range("8:8") -&gt; &#123;RowHeight&#125; = 30;&#125; &#125;$Book-&gt;Save();$Book-&gt;Close();$Excel-&gt;Quit();]]></content>
      <categories>
        <category>Perl</category>
      </categories>
      <tags>
        <tag>Perl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Perl处理文件及文件夹]]></title>
    <url>%2FPerl%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6%E5%8F%8A%E6%96%87%E4%BB%B6%E5%A4%B9%2F</url>
    <content type="text"><![CDATA[123456789101112131415161718192021222324252627use FindBin qw($Bin);#遍历文件夹my $fileReportDir = $Bin; #出报告所在的文件夹地址if(-e $fileReportDir)&#123;opendir DIR, $fileReportDir || die "Error in opening dir $fileReportDir\n";while( my $file = readdir(DIR))&#123;next if $file eq ".";next if $file eq "..";my $fileAll = $fileReportDir."/".$file;if(!unlink($fileAll))&#123;print "=====程序终止！=====\n删除表格（".$fileAll."）失败，请手动删除\n"; #保留黑框system pause;#程序停止运行die; &#125; &#125; closedir DIR;&#125;#读取文件内容open FILE, "&lt;$file" || die "Not Found file: $file\n";while (&lt;FILE&gt;)&#123;my ($gene,$chr) = (split /\t/,$_)[0,1];&#125;close FILE;]]></content>
      <categories>
        <category>Perl</category>
      </categories>
      <tags>
        <tag>Perl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Perl的简单联网操作]]></title>
    <url>%2FPerl%E7%9A%84%E7%AE%80%E5%8D%95%E8%81%94%E7%BD%91%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[GET123456use LWP::UserAgent;my $browser = LWP::UserAgent-&gt;new(agent =&gt; 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6');my $TARGET_URL = "http://www.omim.org/entry/".$OMIM;my $response = $browser-&gt;get($TARGET_URL);my $htmlcontent = $response-&gt;content; POST123456789101112131415161718192021222324252627use LWP::UserAgent;my $browser = LWP::UserAgent-&gt;new;$browser-&gt;timeout(600); #设置缓冲时间600smy $TARGET_URL = "http://122.114.25.231:8582/emp/selfOpenAccountAction!khQuery.action?step=xhdq";my %headers=('Accept'=&gt;'text/html, application/xhtml+xml, */*','Accept-Encoding'=&gt;'gzip, deflate','Accept-Language' =&gt; 'zh-CN','Cache-Control' =&gt; 'no-cache','Connection' =&gt; 'Keep-Alive','Content-Length' =&gt; '71','Content-Type' =&gt; 'application/x-www-form-urlencoded','Cookie' =&gt; 'JSESSIONID=4D4E92EB8830CA8B5DC7F9AA1751AC71','Host' =&gt; '122.114.25.231:8582','Referer' =&gt; 'http://122.114.25.231:8582/emp/query.jsp','User-Agent' =&gt; 'Mozilla/5.0 (MSIE 9.0; Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko');my $response = $browser-&gt;post($TARGET_URL,[ 'dealer.certificateNum' =&gt; $id,'dealer.name' =&gt; $name,],%headers); if ($response-&gt;is_success) &#123; my $htmlcontentStr = $response-&gt;content;&#125;]]></content>
      <categories>
        <category>Perl</category>
      </categories>
      <tags>
        <tag>Perl</tag>
      </tags>
  </entry>
</search>
