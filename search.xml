<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Node.js安装教程]]></title>
    <url>%2Fblogs%2FNodeJs%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[什么是Node.jsNodeJS官网上的介绍： Node.js is a platform built on Chrome’s JavaScript runtime for easily building fast, scalable network applications. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices. 它是一个Javascript运行环境 依赖于Chrome V8引擎进行代码解释 事件驱动 非阻塞I/O（NodeJS遇到I/O事件会创建一个线程去执行，然后主线程会继续往下执行的） 轻量、可伸缩，适于实时数据交互应用 单进程，单线程 Node.js的优缺点NodeJS适合运用在高并发、I/O密集、少量业务逻辑的场景（高并发、聊天、实时消息推送） 优点： 高并发（最重要的优点） NodeJs更改连接到服务器的方式，每个连接发射（emit）一个在NodeJS引擎进程中运行的事件（Event），放进事件队列当中，而不是为每个连接生成一个新的OS线程（并为其分配一些配套内存） 适合I/O密集型应用 缺点： 不适合CPU密集型应用；CPU密集型应用给Node带来的挑战主要是：由于JavaScript单线程的原因，如果有长时间运行的计算（比如大循 环），将会导致CPU时间片不能释放，使得后续I/O无法发起； 解决方案：分解大型运算任务为多个小任务，使得运算能够适时释放，不阻塞I/O调用的发起。 只支持单核CPU，不能充分利用CPU； 可靠性低，一旦代码某个环节崩溃，整个系统都崩溃（原因：单进程，单线程）； 解决方案： Nnigx反向代理，负载均衡，开多个进程，绑定多个端口； 开多个进程监听同一个端口，使用cluster模块。 Debug不方便，错误没有stack trace。 Node.js的安装 访问 Node.js 下载地址：https://nodejs.org/zh-cn/ ，下载最新版本。 双击刚才下载文件，按照步骤默认安装。 Node.js和npm安装完成。 安装完成后打开终端，输入12npm -vnode -v 两个命令，如下图出现版本信息，说明安装成功。]]></content>
      <categories>
        <category>个人博客</category>
      </categories>
      <tags>
        <tag>NodeJs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git安装教程]]></title>
    <url>%2Fblogs%2FGit%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[打开终端，输入1git --version 系统提示安装git 待安装完毕，在终端再次输入1git --version 如下图出现版本信息，说明安装成功。]]></content>
      <categories>
        <category>个人博客</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何使用Hexo创建个人博客]]></title>
    <url>%2Fblogs%2F%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Hexo%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[什么是 Hexo？Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 安装 安装 Hexo 比较简单，但在安装前，需要安装如下应用程序。（如果您已经安装了如下程序，请直接执行第2步。） Node.js （安装教程） Git （安装教程） 安装Hexo，打开终端，输入1npm install -g hexo-cli 建站安装 Hexo 完成后，执行下列命令，Hexo 将会在指定文件夹中创建博客框架。12hexo init &lt;folder&gt;cd &lt;folder&gt; 新建完成后，指定文件夹的目录如下： _config.yml =&gt; 网站的 配置 信息，您可以在此配置大部分的参数。 package.json =&gt; 应用程序的信息。 scaffolds =&gt; 模版文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。 source =&gt; 资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。 themes =&gt; 主题文件夹。Hexo 会根据主题来生成静态页面。 预览 生成静态文件。在终端中输入 1hexo generate 启动服务器。在终端中输入 1hexo server 默认情况下，在浏览器中访问网址： http://localhost:4000/ 即可预览个人博客。 写作你可以执行下列命令来创建一篇新文章。1hexo new &lt;title&gt; 部署 安装 hexo-deployer-git。 1npm install hexo-deployer-git --save 修改配置。 12345deploy: type: git repo: &lt;repository url&gt; #https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io branch: [branch] #published message: [message] 参数 描述 repo 库（Repository）地址 branch 分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。 message 自定义提交信息 (默认为 Site updated: YYYY-MM-DD HH:mm:ss) 生成站点文件并推送至远程库。执行命令。1hexo clean &amp;&amp; hexo deploy 前者清除站点文件，后者重新生成站点文件并将之推送到指定的库分支。]]></content>
      <categories>
        <category>个人博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
